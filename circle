#! /usr/bin/env python

#    The Circle - Decentralized resource discovery software
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import sys,socket,os,string

#os.nice(10)

try:
    import gettext
    gettext.install('circle')
except:
    __builtins__._ = lambda s: s


if sys.version_info < (2,2):
    print "Python too old. Please use Python >= 2.2"
    sys.exit(1)
    

# Change to the home directory
sys.path[:0] = ['.']
for i in range(len(sys.path)):
    sys.path[i] = os.path.abspath(sys.path[i])

if sys.platform != 'win32':
    os.chdir(os.environ['HOME'])
else:
    os.chdir(os.path.dirname(os.path.abspath(sys.argv[0])))


from circlelib import daemon, utility, error

rc_locations = [
    '/etc/rc0.d/K99circle',
    '/etc/rc1.d/K99circle',
    '/etc/rc2.d/S99circle',
    '/etc/rc3.d/S99circle',
    '/etc/rc4.d/S99circle',
    '/etc/rc5.d/S99circle',
    '/etc/rc6.d/K99circle'
]

from threading import Thread
import time
import select

class Text_task(Thread):
    def __init__ (self,output):
        Thread.__init__(self)
        self.output = output

    def run (self):

        utility.stdin_echo(0)
        while 1:
            if select.select([0],[ ],[ ],0.1)[0]:
                char = os.read(0,1)
                if not char:
                    break
                try:
                    self.output.write(char)
                except:
                    break
            try:
                self.output.flush()
            except:
                break
        utility.stdin_echo(1)


def do_command(command,print_error=1,print_result=1):
    
    if sys.platform == 'win32':
        return 0
    try:
        com_sock_file = os.path.join(utility.config_dir, 'daemon_socket')
        com_sock = socket.socket(socket.AF_UNIX,socket.SOCK_STREAM)
        com_sock.connect(com_sock_file)

        input  = com_sock.makefile("rt")
        output = com_sock.makefile("wt")
        output.write(command)
        output.flush()

        if command == 'text\n':
            Text_task(output).start()
            
        if print_result:
            try:
                while 1:
                    char = input.read(1)                    
                    if not char:
                        break
                    sys.stdout.write(char)                  
                    sys.stdout.flush()
            except:
                sys.stdout.write("Transfer interrupted")

        sys.stdout.write('\n')
        output.close()
        input.close()
        com_sock.close()
        return 1
    
    except socket.error:
        if print_error:
            if command in ['gtk\n', 'no-fork\n']:
                daemon.Circle_daemon().run(command)
            else:
                print "Circle daemon not running."                                
        return 0
    
try:
    config = utility.get_config('daemon', { })
    need_sync = 0

    if sys.platform == 'win32':
        daemon.Circle_daemon().run('no-fork\n')

    elif not sys.argv[1:] or ['gtk'] == sys.argv[1:]:
        do_command("gtk\n")
    elif ['text'] == sys.argv[1:] or ['-t'] == sys.argv[1:]:
        do_command("text\n")

    elif ['start_proxy'] == sys.argv[1:]:
        # In case there is one already running
        print _('Making sure daemon is not already running...')
        do_command("quit\n",0)
        daemon.Circle_daemon().run(proxy_mode='always')
            
    elif ['start'] == sys.argv[1:]:
        # In case there is one already running
        print _('Making sure daemon is not already running...')
        do_command("quit\n",0)
        daemon.Circle_daemon().run()
    elif ['stop'] == sys.argv[1:]:
        print _('Stopping Circle daemon...')
        do_command("quit\n")
    elif ['shutdown'] == sys.argv[1:]:
        do_command('shutdown\n')
    elif ['status'] == sys.argv[1:]:
        do_command("status\n")
    elif ['no-fork'] == sys.argv[1:]:
        do_command("no-fork\n")
    elif ['activate'] == sys.argv[1:]:
        do_command("activate\n")
    elif ['get'] == sys.argv[1:2]:
        if len(sys.argv) == 3:
            do_command("get "+sys.argv[2]+"\n")
        else:
            print "usage: circle get <circle-url>"
    elif ['search'] == sys.argv[1:2]:
        if len(sys.argv) == 3:
            do_command("search "+sys.argv[2]+"\n")
        else:
            print "usage: circle search <keyword>"
    elif ['find'] == sys.argv[1:2]:
        if len(sys.argv) == 3:
            do_command("find "+sys.argv[2]+"\n")
        else:
            print "usage: circle find <person>"
    elif ['debug'] == sys.argv[1:]:
        do_command("debug\n")
    elif ['version'] == sys.argv[1:]:
        import circlelib.__init__
        print "The Circle version "+circlelib.__init__.__version__        
    elif ['http','local'] == sys.argv[1:]:
        do_command("http local\n")
    elif ['http','remote'] == sys.argv[1:]:
        do_command("http remote\n")
    elif ['http','stop'] == sys.argv[1:]:
        do_command("http stop\n")
    elif ['publish'] == sys.argv[1:2]:
        if len(sys.argv) == 2:
            print "Setting no public directory."
            config['public_dir'] = ''
        else:
            dir = os.path.abspath(sys.argv[2])
            print "Public directory set to "+dir+"."
            config['public_dir'] = dir
	need_sync = 1
    elif ['connect'] == sys.argv[1:2]:
        if len(sys.argv) == 3:
            print "Connecting to "+sys.argv[2]
            do_command("connect "+sys.argv[2]+'\n')
        else:
            print "usage: circle connect <ip>."
    elif ['pubapt'] == sys.argv[1:]:
        config['publish_apt'] = 1
	print "Apt cache will be published."
	need_sync = 1
    elif ['nopubapt'] == sys.argv[1:]:
        config['publish_apt'] = 0
	print "Apt cache will not be published."
	need_sync = 1
    elif ['autostart'] == sys.argv[1:]:
        for item in ['.']+string.split(os.environ['PATH']):
            path = os.path.abspath(os.path.join(item,sys.argv[0]))
            if os.path.isfile(path):
                break
        else:
            print "Couldn't find own executable!"
            sys.exit(1)
        try:
            for file in rc_locations:
                if not os.path.islink(file):
                    os.symlink(path, file)
        except OSError:
            print "Couldn't install files. Are you root?"
            sys.exit(1)

        print "Circle will now start automatically on boot."

        if not do_command("status",0,0):
            daemon.Circle_daemon().run()
    elif ['noautostart'] == sys.argv[1:]:
        try:
            for file in rc_locations:
                if os.path.islink(file):
                    os.unlink(file)
        except OSError:
            print "Couldn't uninstall files. Are you root?"

        print "Circle will now not start at boot time."
        do_command("quit\n",0)
    else:
        print """
Circle uses a distributed, decentralized protocol for to
provide instant messaging, IRC-like channels, file sharing and personalized news.

Usage:

    circle [command]

Commands:
            
    start         -  start the Circle daemon
    start_proxy   -  start the Circle daemon using a proxy
    no-fork       -  start the gtk interface and the daemon in the same process 
    stop          -  stop the Circle daemon 
    gtk           -  raise the GTK user interface
    text          -  start the text-mode interface
    shutdown      -  stop the running interface
    status        -  show the status of the Circle daemon
    connect <ip>  -  manually connect to host
    version       -  show version number
    search <key>  -  search for files
    find <key>    -  search for people
    get <url>     -  download a file
    http local    -  start http interface for local connections    
    http remote   -  start http interface for remote connections
    http stop     -  stop http interface
    debug         -  display some debugging information
    autostart     -  make circle start automatically at boot time by 
                     installing appropriate links in /etc/rc[0-6].d
                     (only root can do this)
    noautostart   -  stop circle from starting automatically at boot time
    activate      -  manually activate the Circle daemon's hashtable
                     (only if you plan to keep it running long)
    publish [dir] -  specify directory to publish, or set it to none 
    pubapt        -  publish apt cache
    nopubapt      -  do not publish apt cache
    """
        
    if need_sync:
	utility.set_config("daemon",config)
        do_command("sync config\n",0)

except error.Error, err:
    print err.message
